{ config, pkgs, lib, ... }:

let
  cfg = config.services.ddclient;
  boolToStr = bool: if bool then "yes" else "no";
  dataDir = "/var/lib/ddclient1";
  configText = ''
    # This file can be used as a template for configFile or is automatically generated by Nix options.
    cache=${dataDir}/ddclient1.cache
    foreground=YES
    use=${cfg.use}
    login=${cfg.username}
    password=${cfg.password}
    protocol=${cfg.protocol}
    ${lib.optionalString (cfg.script != "") "script=${cfg.script}"}
    ${lib.optionalString (cfg.server != "") "server=${cfg.server}"}
    ${lib.optionalString (cfg.zone != "")   "zone=${cfg.zone}"}
    ssl=${boolToStr cfg.ssl}
    wildcard=YES
    quiet=${boolToStr cfg.quiet}
    verbose=${boolToStr cfg.verbose}
    ${cfg.extraConfig}
    ${lib.concatStringsSep "," cfg.domains}
  '';
in

{
  environment.etc."ddclient1.conf" = {
    enable = cfg.configFile == "/etc/ddclient1.conf";
    mode = "0600";
    text = configText;
  };

  systemd.services.ddclient1 = {
    wantedBy = [ "multi-user.target" ];
    after = [ "network.target" ];
    restartTriggers = [ config.environment.etc."ddclient1.conf".source ];

    description = "ddclient workaround for multiple domains";
    serviceConfig = rec {
      DynamicUser = true;
      RuntimeDirectory = StateDirectory;
      StateDirectory = builtins.baseNameOf "/var/lib/ddclient1";
      Type = "oneshot";
      ExecStartPre = "!${lib.getBin pkgs.coreutils}/bin/install -m666 /path/to/conf/ddclient1.conf /run/${RuntimeDirectory}/ddclient1.conf";
      ExecStart = "${lib.getBin pkgs.ddclient}/bin/ddclient -file /run/${RuntimeDirectory}/ddclient1.conf";
    };
  };

  environment.etc."ddclient2.conf" = {
    enable = cfg.configFile == "/etc/ddclient2.conf";
    mode = "0600";
    text = configText;
  };

  systemd.services.ddclient2 = {
    wantedBy = [ "multi-user.target" ];
    after = [ "network.target" ];
    restartTriggers = [ config.environment.etc."ddclient2.conf".source ];

    description = "ddclient workaround for multiple domains";
    serviceConfig = rec {
      DynamicUser = true;
      RuntimeDirectory = StateDirectory;
      StateDirectory = builtins.baseNameOf "/var/lib/ddclient2";
      Type = "oneshot";
      ExecStartPre = "!${lib.getBin pkgs.coreutils}/bin/install -m666 /path/to/conf/ddclient2.conf /run/${RuntimeDirectory}/ddclient2.conf";
      ExecStart = "${lib.getBin pkgs.ddclient}/bin/ddclient -file /run/${RuntimeDirectory}/ddclient2.conf";
    };
  };
}
